{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2: Add Authentication to the Expenses Web Application",
  "steps": [
    {
      "file": "",
      "line": 1,
      "title": "About Adding Authentication",
      "description": "## About Adding Authentication\nNow that the application is set up in the Auth0 dashboard, and the application's codebase is configured with the correct parameters to connect to it, we're ready to add authentication. \n\nTo do this, the application will make use of some Express middleware that will provide OpenID Connect based authentication.\n\nSpecifically, the middleware automatically defines three routes in the application:\n\n- #### The login route, /login\n    This route builds the OpenID Connect request and redirects to the authorization server (In this case, Auth0). For this to work properly, the middleware needs to include specific parameters with the request. You will configure these values using environment variables in the next step.\n- #### /callback\n    This handles the authorization server's (Auth0) response and performs required validations like nonce, state, and token verification.\n- #### /logout\n    This terminates the session in the application and redirects to the authorization server (Auth0) to end the session there as well.\n\nThe middleware will also augment Express's request object with additional properties whenever the request is authenticated. For example, req.openid.user is a property that will contain user information."
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Edit the App Code to Require the Middleware\n\nHere, we'll add the OpenID Connect Express middleware to our code, to enable it for use by the application.\n\nClick Insert Code below to drop this straight in.\n\n``` jsx\nconst { auth } = require(\"express-openid-connect\");\n\n```",
      "line": 13,
      "selection": {
        "start": {
          "line": 9,
          "character": 1
        },
        "end": {
          "line": 9,
          "character": 1
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Configure the App to use the Authentication Middleware\nIn order for our application to use the auth middleware to route requests, it must be supplied with certain keys. Let's add the necessary code, below, then walk through each of the required keys.\n\n``` jsx\n\napp.use(\n    auth({\n        authorizationParams: {\n            response_type: 'code',\n        },\n        secret: SESSION_SECRET,\n        auth0Logout: true,\n        baseURL: APP_URL,\n        issuerBaseURL: ISSUER_BASE_URL,\n        clientID: CLIENT_ID,\n    })\n);\n\n```\n to add it to the application.",
      "line": 67,
      "selection": {
        "start": {
          "line": 41,
          "character": 1
        },
        "end": {
          "line": 41,
          "character": 1
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Configure the Local Environment\n\nIn a moment, we'll take a look through the configuration keys within the code that we just added for the auth middleware. Before we do, let's ensure that our local environment is configured with the necessary environmental variables (values) for these keys. \n\n   1. Click [here](command:auth0.lab.localConfigure) to ensure that this local environment is configured with the correct values to match the Auth0 configuration.\n   1. Click [here](command:workbench.action.files.saveFiles) to save this progress.\n\nYou'll notice that a .env file has been added to your web-app directory. We'll take a quick look at it in the next step, before returning to examine the keys in our code.",
      "line": 52,
      "selection": {
        "start": {
          "line": 41,
          "character": 1
        },
        "end": {
          "line": 52,
          "character": 3
        }
      }
    },
    {
      "file": "src/web-app/.env",
      "description": "## Examine the Environment Variables\nIn the last step, you clicked a command that leveraged the Auth0 Labs Extension for VSCode to reach out to your tenant and retrieve the necessary values to configure this local environment. The values in this .env file are unique to your Auth0 tenant, and are available to your application as environment variables when the application is launched.\n\nLet's go back to our application code and talk about the keys we've added to the middleware configuration.",
      "line": 4
    },
    {
      "file": "src/web-app/index.js",
      "title": "About the response_type",
      "description": "## About the response_type\n\n**response_type=code** indicates that the application expects to receive an authorization code. Your application will exchange the authorization code for an ID token and access token by making a POST request to the authorization server's token endpoint.",
      "selection": {
        "start": {
          "line": 44,
          "character": 1
        },
        "end": {
          "line": 46,
          "character": 28
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## About the secret key\n\nThis is used to derive an encryption key for the session cookie stored by Express's session middleware. Note that the same value is used by the session middleware. The auth middleware will use this secret value to sign the transient cookies used by the login callback. \n\nThe value can be obtained directly from the **SESSION_SECRET** environment variable and this key can be ommited. We are passing this directly for this sample lab to make it clear the value is being used by the middleware. \n\nThese cookies are written to the user's browser. If there are multiple webservers that need to interpret the cookie, it's important that the session secret be the same on each respective environment.",
      "line": 51,
      "selection": {
        "start": {
          "line": 47,
          "character": 1
        },
        "end": {
          "line": 47,
          "character": 28
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## About the baseURL\nThis is the publicly accessible URL for the application. The middleware uses this to construct URLs pointing back to the application for consumption by the authorization server. \n\nSimilar to the session secret, the value can be obtained directly from the **APP_URL** environment variable and this key can be ommited. We are passing this directly for this sample lab to make it clear the value is being used by the middleware.",
      "line": 51,
      "selection": {
        "start": {
          "line": 49,
          "character": 1
        },
        "end": {
          "line": 49,
          "character": 22
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## About the issuerBaseURL\nThis is the fully qualified domain of the OpenID Connect provider that the application is configured to use; in this case your Auth0 tenant.\n\nThe middleware uses the **issuerBaseURL** to download the OpenID Connect configuration from the discovery document, available at the URL: \n\n`https://{your-auth0-domain}/.well-known/openid-configuration`\n\nThis discovery document is a standard OpenID Connect mechanism used to publish relevant discovery metadata of the OpenID Connect provider (Auth0), including a link to what keys should be used for validating the tokens it issues.\n\nOnce again, the value can be obtained directly from the **ISSUER_BASE_URL** environment variable and this key can be ommited. We are passing this directly for this sample lab to make it clear the value is being used by the middleware.",
      "line": 51,
      "selection": {
        "start": {
          "line": 50,
          "character": 1
        },
        "end": {
          "line": 50,
          "character": 36
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## About the clientID\nThe **clientID** is created on the authorization server (Auth0) and must be provided in each request so that the authorization server knows what application the authentication request is for, so you can say it is the unique identifier of the application.\n\nAs with the other keys, the value can be obtained directly from the **CLIENT_ID** environment variable and this key can be ommited. We are passing this directly for this sample lab to make it clear the value is being used by the middleware.\n\n\n\n    ",
      "line": 51,
      "selection": {
        "start": {
          "line": 51,
          "character": 1
        },
        "end": {
          "line": 51,
          "character": 25
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Note: About Environment Variables\n\nYou'll notice that in the code we inserted, all of the keys are passed explicitly and environment variables provide the values. This is because we've specified the values for these keys in our environment file for the application (env-config.js). This allows us to tweak a couple values based in the environment at runtime.\n\nThe **secret**, **baseURL**, **issuerBaseURL** and **clientID** don't actually have to be explicitly passed to the auth middleware if they are available as environment varables in the environment the application is running. The middleware is able to recognize them from there if they are formatted as **SESSION_SECRET**, **APP_URL**, **ISSUER_BASE_URL** and **CLIENT_ID** respectively. We've specified them in this in-app configuration for demonstration purposes.",
      "line": 51,
      "selection": {
        "start": {
          "line": 50,
          "character": 1
        },
        "end": {
          "line": 51,
          "character": 25
        }
      }
    },
    {
      "file": "",
      "line": 1,
      "title": "Run the App - Uh Oh!",
      "description": "## Run the App -- Uh Oh!\nFair warning, we're not done yet. We're going to go ahead and run the app, but there'll be an expected error. Don't worry - we'll fix it. \n\n(It may take a moment for the error to appear.)\n\n#### Run the Application\n\n1. Click [here](command:workbench.action.files.saveFiles) to save any edited files if needed.\n1. Click [here](command:workbench.action.terminal.new) to open your vscode terminal. (You may already have one open, that's ok)\n1. Click [here](command:workbench.action.debug.start) to launch the app locally.\n1. Click [Open URL](command:auth0.lab.openEndpointByName?[\"Lab: Web App\"]) to open the app in your web browser.\n\n#### Review the Error\n\nHere's that \"Uh Oh\" moment we warned you about. \n\nThe authorization server has issued an error: **Callback URL mismatch**. To correct this, we need to add the URL that our application is running from to the allow list within the Auth0 dashboard. \n\nNear the bottom of the page, you will see a link labeled __See details for this error__. Click it. A detailed error is displayed showing the callback url provided by the application.    \n\n#### Let's fix this.\n\nWe'll need to update the application's configuration in the Auth0 tenant next, but before you go copy your application's URL from the detailed error message. We'll need it!"
    },
    {
      "file": "",
      "line": 1,
      "title": "Add the Callback and Allowed Logout URLs",
      "description": "## Add the Callback and Allowed Logout URLs\nThe next few steps will require stepping out of VSCode to make some configuration changes in your tenant in the Auth0 dashboard. \n\n1. #### Before moving forward let's do a little housekeeping:\n    1. Make sure everything here is saved by clicking [here](command:workbench.action.files.saveFiles).\n    1. Stop the debug session by clicking [here](command:workbench.action.debug.stop). We'll start it again after making these changes in our tenant.\n\n1. #### Log into your Auth0 dashboard.\n\n1. #### Make sure you're working in your *dev-* tenant.\n1. #### Select the _Applications_ drop-down menu in the left-side navigation, and select _Applications_\n    ![Open applications menu](https://cdn.auth0.com/website/a0fun/v2/working-with-applications-1.gif)\n\n1. #### Click into the configuration for the Lab: Web App.\n    ![Open the Web App settings](https://cdn.auth0.com/website/auth0/labs/ilt/wwa-1.gif)\n\n1. #### Scroll down to locate the Application URI's section.\n    ![Locate the Application URI section](https://cdn.auth0.com/website/auth0/labs/ilt/working-with-applications.gif)\n\n1. #### Modify the Callback and Allowed Logout URLs.\n    1. Under the _Allowed Callback URLs_ field, paste the URL from your application that you copied in the last step. \n    1. For the _Allowed Logout URLs_, you will use the base URL for the application. Paste the same URL as in the previous step, but remove `/callback`.\n    1. Scroll to the bottom of the page and click the _Save Changes_ button.\n\nWell done! Our Auth0 tenant configuration for the application is now configured to allowlist our application's callback and logout URLs.\n\nIn the next step, we'll run our application again and log in!"
    },
    {
      "file": "",
      "line": 1,
      "description": "## Log in to the App with Auth0!\nNow that the authorization server (Auth0) knows where to expect our application's requests to come from, we should be able to load the application up and log in. \n1. #### Re-Launch the App.\n    1. Click [here](command:workbench.action.debug.start) to launch the app locally.\n    1. Click [Open URL](command:auth0.lab.openEndpointByName?[\"Lab: Web App\"]) to open the app in your web browser.\n1. #### Create a new account.\n  We're going to log in to the application, but first, let's create a new user account so that your admin account can remain separate. \n    1. #### Click the *Sign-Up* link and create a new account. \n    1. #### Do not use the *Continue with Google* button in any of the labs, as the Single Sign-On can skip over some of the learning opportunities.\n    1. #### It is best to use a personal or burner Gmail account that you have access to using a username and password.\n    1. #### If you have a Gmail account, append \"_+auth0labs_\" to create a Gmail alias for it. \n    \n        _Example:_ If my email is someone@gmail.com, it would become someone<b>+auth0labs</b>@gmail.com\n     This step will ensure that no wires are crossed with all the accounts you'll be setting up over the course of these labs. Any emails that your app or Auth0 generate will still come to your regular Gmail inbox, but the account will be listed separately in Auth0. We'll use this account later, so be certain to use a password that you will remember!\n    \n     Once the account is created, you will be authenticated and returned to the application. ",
      "title": "Log in to the App with Auth0!"
    },
    {
      "file": "",
      "line": 1,
      "title": "View Your Profile",
      "description": "## View Your Profile\nAfter authentication, the application displays the profile image associated with the authenticated user and addresses them by name. The username is now listed and links to a profile page displaying the user's profile information.\n\n1. #### View the profile information\n    Click the *username* link on the page to view the profile.\n    \n2. #### Logout to end the session\n    After having a look through the information, click the Logout link to log out of the application. \n\n    Notice that you are immediately prompted to authenticate again. This is because we applied the auth middleware to all routes in the application. So, the auth middleware is intercepting all requests and forcing authentication.\n\n    Let's make some adjustments to the application to correct this."
    },
    {
      "file": "",
      "line": 1,
      "title": "Adjust Where Authentication Applies",
      "description": "## Adjust Where Authentication Applies\nTypically, applications will have a mixture of public and private routes. Let's make some changes to our application that will allow users to visit the home page, but require authentication to view expenses and profile information.\n\n1. #### Before moving forward let's do a little housekeeping:\n    1. Make sure everything here is saved by clicking [here](command:workbench.action.files.saveFiles).\n    1. Stop the debug session by clicking [here](command:workbench.action.debug.stop). We'll start it again after making these changes in our application.\n\nNext, we'll update the authentication middleware configuration to add a new value that will make authentication optional globally.\n"
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Enable Global Authentication Routing\nHere, we'll add code to the application that configures the middleware to make authentication optional across the entire application. In the app.use configuration block that we added previously, we'll add:\n\n``` jsx\n\nauthRequired: false,\n```\nto make this change.\n\\\n&nbsp;\n\\\nWith this done, all routes are public again. We'll need a way to explicitly make certain routes private. Thankfully, this functionality is supplied by the same express-openid-connect middleware! ",
      "line": 53,
      "selection": {
        "start": {
          "line": 51,
          "character": 50
        },
        "end": {
          "line": 51,
          "character": 50
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Enable Securing Specific Routes\nBefore we can configure the authorization middleware to allow us to secure specific routes, we need to import the **requiresAuth** middleware to our require statement.\n\nThis middleware is intended to be applied to the specific routes that require an authenticated user.\n\n``` jsx\n, requiresAuth\n```\nto add this now.\n",
      "line": 9,
      "selection": {
        "start": {
          "line": 9,
          "character": 13
        },
        "end": {
          "line": 9,
          "character": 13
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Secure the User Route\nTo secure the user route, we'll add the **requiresAuth** middleware directly to it.\n\n``` jsx\n requiresAuth(),\n```\nto secure the route.",
      "line": 79,
      "selection": {
        "start": {
          "line": 79,
          "character": 17
        },
        "end": {
          "line": 79,
          "character": 17
        }
      }
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Secure the Expenses Route\nWe'll want to ensure unauthenticated users aren't able to view the Expenses, either. So we'll add the middleware to this route too.\n\n``` jsx\n requiresAuth(),\n```\n to secure the route.",
      "line": 88,
      "selection": {
        "start": {
          "line": 88,
          "character": 21
        },
        "end": {
          "line": 88,
          "character": 21
        }
      }
    },
    {
      "file": "",
      "line": 1,
      "title": "Nice work!",
      "description": "## Nice work!\n1. Save the changes you made to the routes by clicking [here](command:workbench.action.files.saveFiles).\n1. Click [here](command:workbench.action.debug.start) to launch the app locally.\n1. Click [Open URL](command:auth0.lab.openEndpointByName?[\"Lab: Web App\"]) to open the app in your web browser.\n1. Try to access the expenses route both authenticated and not authenticated.\n\nYou've successfully secured the User and Expenses routes! "
    }
  ]
}